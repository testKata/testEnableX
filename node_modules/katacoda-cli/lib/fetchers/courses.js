"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const rp = require('request-promise');
const fuzzy = require('fuzzy');
const _ = require('lodash');
const __ = require('underscore');
const file_utils_1 = require("../helpers/file-utils");
const create_1 = require("../commands/training/create");
function searchScenariosAndCourses(answers, input) {
    var scenariosAndCourses = create_1.listPromptScenariosAndCourses;
    if (scenariosAndCourses === undefined) {
        scenariosAndCourses = getTitlesScenariosAndCourses();
    }
    input = input || '';
    return new Promise(function (resolve) {
        setTimeout(function () {
            var fuzzyResult = fuzzy.filter(input, scenariosAndCourses);
            resolve(fuzzyResult.map(function (el) {
                return el.original;
            }));
        }, _.random(30, 500));
    });
}
exports.searchScenariosAndCourses = searchScenariosAndCourses;
function getCourses() {
    var path = create_1.repoPath;
    var listCourses = [];
    let filesToExclude = ['external-pathway.json', 'homepage-pathway.json'];
    var courseFilesPath = file_utils_1.listFiles(path, 'pathway.json', 'training', null, null);
    filesToExclude.forEach((fileToExclude) => {
        var index = courseFilesPath.indexOf(path + fileToExclude);
        if (index > -1) {
            courseFilesPath.splice(index, 1);
        }
    });
    courseFilesPath.forEach((file) => {
        var course = file_utils_1.getFileContents(file);
        var directoryName = getDirectoryName(file);
        if (course) {
            course.courses.forEach((c) => {
                c.title = directoryName + '/' + c.title;
                c.directoryName = directoryName;
                c.type = 'course';
            });
            var arrayTmp = listCourses.concat(course.courses);
            listCourses = arrayTmp;
        }
    });
    return listCourses;
}
function getScenarios() {
    var listScenariosDefinitions = file_utils_1.getListScenariosDefinitions(create_1.repoPath);
    var scenarios = [];
    listScenariosDefinitions.forEach((scenario) => {
        var s = file_utils_1.getFileContents(create_1.repoPath + '/' + scenario + '/index.json');
        if (s) {
            s.title = scenario + '/' + s.title;
            s.directoryName = scenario;
            s.type = 'scenario';
            scenarios.push(s);
        }
    });
    return scenarios;
}
function getAllScenarios(path, ignore) {
    var directoriesToIgnore = ['training', 'npm_modules', 'node_modules'].concat(ignore);
    return file_utils_1.listFiles(path, 'index.json', directoriesToIgnore, null, null);
}
exports.getAllScenarios = getAllScenarios;
function getScenariosAndCourses() {
    var scenariosAndCourses = [];
    let listCourses = getCourses();
    let listScenarios = getScenarios();
    scenariosAndCourses = scenariosAndCourses.concat(listCourses).concat(listScenarios);
    return scenariosAndCourses;
}
exports.getScenariosAndCourses = getScenariosAndCourses;
function getDirectoryName(fullPath) {
    var filename = fullPath.replace(create_1.repoPath, "");
    var name = filename.split("-pathway.json");
    var directoryName = name[0];
    if (directoryName.startsWith("/")) {
        directoryName = directoryName.substr(1, directoryName.length - 1);
    }
    return directoryName;
}
function getTitlesScenariosAndCourses() {
    var titlesScenariosAndCourses = [];
    var scenariosAndCourses = getScenariosAndCourses();
    titlesScenariosAndCourses = __.pluck(scenariosAndCourses, 'title');
    return titlesScenariosAndCourses;
}
exports.getTitlesScenariosAndCourses = getTitlesScenariosAndCourses;
