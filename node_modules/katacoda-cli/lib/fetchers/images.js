"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const rp = require('request-promise');
const fuzzy = require('fuzzy');
const _ = require('lodash');
const __ = require('underscore');
const config_1 = require("../config");
const constants_1 = require("../helpers/constants");
async function getImages() {
    return new Promise(function (resolve, reject) {
        var options = {
            uri: config_1.backendEndpoint,
            json: false
        };
        rp(options)
            .then(function (data) {
            const images = JSON.parse(data);
            if (!images) {
                resolve(constants_1.defaultImages);
            }
            let other = { value: "other", name: "Other" };
            images.push(other);
            resolve(images);
        })
            .catch(function (error) {
            resolve(constants_1.defaultImages);
        });
    });
}
exports.getImages = getImages;
async function searchImages(answers, input) {
    let images = await getImages();
    let images2 = __.pluck(images, 'name');
    input = input || '';
    return new Promise(function (resolve) {
        setTimeout(function () {
            var fuzzyResult = fuzzy.filter(input, images2);
            resolve(fuzzyResult.map(function (el) {
                return el.original;
            }));
        }, _.random(30, 500));
    });
}
exports.searchImages = searchImages;
async function validateImage(imageid) {
    return new Promise(function (resolve, reject) {
        var options = {
            method: 'POST',
            uri: config_1.backendEndpoint,
            form: { imageid: imageid },
            json: false
        };
        rp(options)
            .then(function (data) {
            var isValid = false;
            if (data) {
                isValid = JSON.parse(data);
            }
            resolve(isValid);
        })
            .catch(function (error) {
            resolve(false);
        });
    });
}
exports.validateImage = validateImage;
module.exports = {
    getImages,
    searchImages,
    validateImage
};
