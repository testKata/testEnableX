"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const inquirer = require("inquirer");
const fs = require("fs-extra");
const path = require("path");
const validation_service_1 = require("../../../helpers/validation-service");
const choices = {
    'Copy to courses folder': 'copy',
    'Move to courses folder': 'move'
};
class ScenariosAdd extends command_1.Command {
    getScenarioObject(scenarioPath) {
        const scenarioId = validation_service_1.getFriendlyUrlFromPath(scenarioPath);
        let indexJson = fs.readJsonSync(`${scenarioPath}/index.json`);
        return {
            course_id: scenarioId,
            title: indexJson.title,
            description: indexJson.description
        };
    }
    updatePathwayFile(coursePath, scenarioPath) {
        const courseUrl = validation_service_1.getFriendlyUrlFromPath(coursePath);
        const pathwayFile = `${path.join(coursePath, '../')}${courseUrl}-pathway.json`;
        let content = fs.readJsonSync(pathwayFile);
        const scenarioObject = this.getScenarioObject(scenarioPath);
        if (!content.courses) {
            content.courses = [];
        }
        const filteredCourses = content.courses.filter((scenario) => scenario.course_id === scenarioObject.course_id);
        if (!filteredCourses.length) {
            content.courses.push(scenarioObject);
        }
        fs.writeJsonSync(pathwayFile, content, { spaces: 2 });
    }
    moveOrCopyScenarioFolder(coursePath, moveOrCopy, scenarioPath, scenarioUrl) {
        if (moveOrCopy === 'move') {
            fs.moveSync(scenarioPath, `${coursePath}/${scenarioUrl}`);
        }
        else {
            fs.copySync(scenarioPath, `${coursePath}/${scenarioUrl}`);
        }
    }
    async getAnswers() {
        return inquirer.prompt([
            {
                name: 'scenarioPath',
                message: 'Please enter scenario path',
                default: process.cwd(),
                validate: validation_service_1.validateScenario
            },
            {
                name: 'coursePath',
                message: 'Please enter course path',
                default: process.cwd(),
                validate: validation_service_1.validateCourse
            },
            {
                type: 'list',
                name: 'moveOrCopy',
                message: 'Would you like todo?',
                choices: Object.keys(choices)
            }
        ]);
    }
    async run() {
        try {
            const responses = await this.getAnswers();
            const scenarioUrl = validation_service_1.getFriendlyUrlFromPath(responses.scenarioPath);
            const scenarioParent = path.dirname(responses.scenarioPath);
            this.updatePathwayFile(responses.coursePath, responses.scenarioPath);
            if (scenarioParent !== responses.coursePath) {
                this.moveOrCopyScenarioFolder(responses.coursePath, choices[responses.moveOrCopy], responses.scenarioPath, scenarioUrl);
            }
            return this.log('Scenario added to course successfully.');
        }
        catch (err) {
            return this.error(`Error: ${err.toString()}`);
        }
    }
}
ScenariosAdd.description = 'Add a existing scenario to course';
exports.default = ScenariosAdd;
