"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const fs = require("fs");
const inquirer = require('inquirer');
inquirer.registerPrompt('autocomplete', require('inquirer-autocomplete-prompt'));
const templates_1 = require("../../helpers/templates");
const validation_service_1 = require("../../helpers/validation-service");
const string_utils_1 = require("../../helpers/string-utils");
const courses_1 = require("../../fetchers/courses");
const file_utils_1 = require("../../helpers/file-utils");
exports.repoPath = '';
class TrainingCreate extends command_1.Command {
    constructor() {
        super(...arguments);
        this.courses = [];
    }
    async getTrainingDetails() {
        const responses = await inquirer.prompt([
            {
                name: 'username',
                message: 'Username: ',
                validate: validation_service_1.validateUsername,
            },
            {
                name: "repoPath",
                message: "Enter the root path of your repository:",
                validate: validation_service_1.validateRepoPath,
                default: process.cwd()
            },
            {
                name: "title",
                message: "Training Title:",
                validate: validation_service_1.validateTitle
            },
            {
                name: "description",
                message: "Training Description:",
                validate: validation_service_1.validateDescription
            }
        ]);
        return responses;
    }
    getCourseDetails() {
        var responsesCourse = inquirer.prompt([
            {
                type: 'autocomplete',
                name: 'title',
                message: 'Course:',
                source: courses_1.searchScenariosAndCourses,
            },
            {
                type: 'confirm',
                name: 'addMoreCourses',
                message: 'Do you want to add another scenario?',
                default: false
            }
        ]);
        return responsesCourse;
    }
    async run() {
        try {
            const training = await this.getTrainingDetails();
            this.training = training;
            this.initializeValues(training);
            var course = await this.getCourseDetails();
            this.addCourse(course);
            var moreCourses = course.addMoreCourses;
            while (moreCourses === true) {
                var course2 = await this.getCourseDetails();
                this.addCourse(course2);
                moreCourses = course2.addMoreCourses;
            }
            this.createTrainingPathwayFile(this.training, this.courses);
            return this.log("Training created successfully.");
        }
        catch (err) {
            return this.error(`Error: ${err.toString()}`);
        }
    }
    createTrainingPathwayFile(training, courses) {
        var trainingPath = training.repoPath + '/training';
        trainingPath = file_utils_1.expandPath(trainingPath);
        if (!fs.existsSync(trainingPath)) {
            fs.mkdirSync(trainingPath);
        }
        templates_1.pathwayTrainingTemplate.title = training.title;
        templates_1.pathwayTrainingTemplate.description = training.description;
        //list courses
        templates_1.pathwayTrainingTemplate.courses = courses;
        const data = JSON.stringify(templates_1.pathwayTrainingTemplate, null, 2);
        let filename = string_utils_1.sentenceToKebabCase(training.title);
        fs.writeFileSync(`${trainingPath}/${filename}-pathway.json`, data, "utf8");
    }
    initializeValues(training) {
        var tmpPath = file_utils_1.expandPath(training.repoPath);
        if (!tmpPath.endsWith('/')) {
            tmpPath = tmpPath + '/';
        }
        exports.repoPath = tmpPath;
        exports.listPromptScenariosAndCourses = courses_1.getTitlesScenariosAndCourses();
    }
    completeScenarioOrCourse(inputCourseScenario) {
        if (!this.listScenariosAndCourses) {
            this.listScenariosAndCourses = courses_1.getScenariosAndCourses();
        }
        var scenarioCourse = this.listScenariosAndCourses.find(function (element) {
            return element.title === inputCourseScenario.title;
        });
        let courseToAdd = undefined;
        if (scenarioCourse.type === 'course') {
            courseToAdd = {
                pathway_id: this.training.username.trim() + '/' + scenarioCourse.directoryName,
                id: scenarioCourse.course_id,
                course_id: scenarioCourse.course_id,
                title: this.getCourseTitle(scenarioCourse.title),
                description: scenarioCourse.description
            };
        }
        else if (scenarioCourse.type === 'scenario') {
            courseToAdd = {
                pathway_id: this.training.username.trim(),
                title: this.getCourseTitle(scenarioCourse.title),
                id: scenarioCourse.directoryName,
                course_id: scenarioCourse.directoryName,
                description: scenarioCourse.description
            };
        }
        ;
        return courseToAdd;
    }
    getCourseTitle(title) {
        var courseTitle = title.split("/");
        return courseTitle[courseTitle.length - 1];
    }
    addCourse(courseScenario) {
        var courseCompleted = this.completeScenarioOrCourse(courseScenario);
        this.deleteCourseFromList(courseScenario);
        this.courses.push(courseCompleted);
    }
    deleteCourseFromList(courseScenario) {
        var title = courseScenario.title;
        var tmpListScenariosAndCourses = exports.listPromptScenariosAndCourses;
        var index = tmpListScenariosAndCourses.indexOf(title);
        if (index > -1) {
            tmpListScenariosAndCourses.splice(index, 1);
        }
        exports.listPromptScenariosAndCourses = tmpListScenariosAndCourses;
    }
}
TrainingCreate.description = "Create a new Katacoda training";
exports.default = TrainingCreate;
