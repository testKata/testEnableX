"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const inquirer = require("inquirer");
const validation_service_1 = require("../../helpers/validation-service");
const cli_ux_1 = require("cli-ux");
class ScenariosValidateAll extends command_1.Command {
    async getRepoPath() {
        const repoPath = await inquirer.prompt([
            {
                name: 'repoPath',
                message: 'Enter Repo Path: ',
                default: process.cwd()
            }
        ]);
        return repoPath;
    }
    async run() {
        const { flags } = this.parse(ScenariosValidateAll);
        var repoPath = undefined;
        var ignore = [];
        if (flags.repo) {
            repoPath = flags.repo;
        }
        else {
            var answer = await this.getRepoPath();
            repoPath = answer.repoPath;
        }
        if (flags.ignore) {
            var i = flags.ignore;
            if (i !== undefined && i !== '') {
                ignore = i.split(',');
            }
        }
        cli_ux_1.default.action.start('Starting validation');
        var validations = await validation_service_1.validateAllScenarios(String(repoPath), ignore);
        cli_ux_1.default.action.stop();
        if (validations.hasErrors) {
            validations.validations.forEach(v => {
                this.log(v.validationMessage);
            });
            this.exit(1);
        }
        else {
            this.log('Scenarios are valid');
            this.exit(0);
        }
    }
}
ScenariosValidateAll.flags = {
    repo: command_1.flags.string(),
    ignore: command_1.flags.string()
};
ScenariosValidateAll.description = 'Validate structure of all scenarios';
exports.default = ScenariosValidateAll;
