"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const fs = require("fs");
const inquirer = require('inquirer');
inquirer.registerPrompt('autocomplete', require('inquirer-autocomplete-prompt'));
const difficultyLevels_1 = require("../../fetchers/difficultyLevels");
const images_1 = require("../../fetchers/images");
const layouts_1 = require("../../fetchers/layouts");
const constants_1 = require("../../helpers/constants");
const templates_1 = require("../../helpers/templates");
const validator = require("../../helpers/validation-service");
const file_utils_1 = require("../../helpers/file-utils");
class ScenariosCreate extends command_1.Command {
    async generateIndexFile(scenario, steps) {
        var images = await images_1.getImages();
        var defaultLayoutsImages = await layouts_1.getLayoutsImages();
        const imagesWithFixedLayouts = Object.keys(defaultLayoutsImages);
        templates_1.indexTemplate.title = scenario.title;
        templates_1.indexTemplate.description = scenario.description;
        templates_1.indexTemplate.time = scenario.time;
        templates_1.indexTemplate.difficulty = scenario.difficulty;
        templates_1.indexTemplate.environment.uilayout =
            constants_1.defaultLayouts[scenario.layout] || defaultLayoutsImages[scenario.image];
        if (scenario.custom && scenario.custom.image) {
            templates_1.indexTemplate.backend.imageid = scenario.custom.image;
        }
        else {
            var imageId = images.find(function (element) {
                return element.name === scenario.image;
            });
            if (imageId) {
                templates_1.indexTemplate.backend.imageid = imageId.value;
            }
        }
        if (scenario.port) {
            templates_1.indexTemplate.backend.port = scenario.port;
        }
        let stepObject = steps.splice(2, scenario.steps);
        stepObject = stepObject.map((name) => {
            return {
                title: name.replace('step', 'Step '),
                text: `${name}.md`
            };
        });
        templates_1.indexTemplate.details.steps = stepObject;
        const data = JSON.stringify(templates_1.indexTemplate, null, 2);
        fs.writeFileSync(`${scenario.url}/index.json`, data, 'utf8');
    }
    async generateScenarioContents(scenario) {
        const fileNames = file_utils_1.generateFileNames(scenario.steps);
        const steps = file_utils_1.createMarkdownFiles(scenario.url, fileNames);
        await this.generateIndexFile(scenario, steps);
    }
    async getScenarioDetails() {
        var difficultyLevels = await difficultyLevels_1.getDifficultyLevels();
        var layouts = await layouts_1.getLayouts();
        var defaultLayoutsImages = await layouts_1.getLayoutsImages();
        const imagesWithFixedLayouts = Object.keys(defaultLayoutsImages);
        const responses = await inquirer.prompt([
            {
                name: 'url',
                message: 'Friendly url: ',
                validate: validator.validateFriendlyUrl
            },
            {
                name: 'title',
                message: 'Scenario Title: ',
                validate: validator.validateTitle
            },
            {
                name: 'description',
                message: 'Scenario Description: ',
                validate: validator.validateDescription
            },
            {
                type: 'list',
                name: 'difficulty',
                message: 'Difficulty Level: ',
                choices: difficultyLevels
            },
            {
                name: 'time',
                message: 'Estimated time: (Please specify in minutes or hours e.g. 2 hours)',
                default: '60 minutes'
            },
            {
                name: 'steps',
                message: 'Number of Steps (Not including intro & finish): ',
                validate: validator.validateNumber
            },
            {
                type: 'autocomplete',
                name: 'image',
                message: 'Image: ',
                source: images_1.searchImages,
            },
            {
                when: function (responses) {
                    return responses.image === 'Other';
                },
                type: 'input',
                name: 'custom.image',
                message: 'Custom image:',
                validate: await validator.validateExistingImage
            },
            {
                type: 'list',
                name: 'layout',
                message: 'Layout: ',
                choices: layouts,
                when: (responses) => !imagesWithFixedLayouts.includes(responses.image)
            },
            {
                name: 'port',
                message: 'Port(Required for the layout you chose): ',
                when: (responses) => responses.layout === 'Terminal + Iframe',
                validate: validator.validateNumber
            }
        ]);
        return responses;
    }
    async run() {
        try {
            const scenario = await this.getScenarioDetails();
            fs.mkdirSync(scenario.url);
            await this.generateScenarioContents(scenario);
            return this.log('Scenario created successfully.');
        }
        catch (err) {
            return this.error(`Error: ${err.toString()}`);
        }
    }
}
ScenariosCreate.description = 'Create a new Katacoda scenario';
exports.default = ScenariosCreate;
