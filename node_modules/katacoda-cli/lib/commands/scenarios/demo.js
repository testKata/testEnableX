"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const fs = require("fs-extra");
const path = require("path");
const inquirer = require('inquirer');
const demoPath = `${process.cwd()}/demo-scenario`;
class ScenariosDemo extends command_1.Command {
    confirmOverwrite() {
        return inquirer.prompt([
            {
                type: 'confirm',
                name: 'answer',
                message: 'Folder with name "demo-scenario" already exists. Do you want to overwrite? ',
                default: true
            }
        ]);
    }
    generateUniqueScenarioPath() {
        const uniqueID = Math.floor(Math.random() * 200) + 1;
        const path = `${demoPath}-${uniqueID}`;
        if (!fs.pathExistsSync(path)) {
            return path;
        }
        return this.generateUniqueScenarioPath();
    }
    generateDemo(scenarioPath) {
        const pathToDemoScenario = path.join(__dirname, '../../helpers/sample');
        fs.ensureDirSync(scenarioPath);
        fs.copySync(pathToDemoScenario, scenarioPath);
        return this.log(`Demo scenario created. Check folder: ${scenarioPath}`);
    }
    async run() {
        try {
            if (fs.pathExistsSync(demoPath)) {
                let shouldOverwrite = await this.confirmOverwrite();
                shouldOverwrite = shouldOverwrite.answer;
                const uniquePath = this.generateUniqueScenarioPath();
                return shouldOverwrite
                    ? this.generateDemo(demoPath)
                    : this.generateDemo(uniquePath);
            }
            return this.generateDemo(demoPath);
        }
        catch (error) {
            return this.error(`Error: ${error.toString()}`);
        }
    }
}
ScenariosDemo.description = 'Generate a demo scenario';
exports.default = ScenariosDemo;
