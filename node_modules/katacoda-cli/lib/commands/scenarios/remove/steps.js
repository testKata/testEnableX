"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const inquirer = require("inquirer");
const fs = require("fs-extra");
const validation_service_1 = require("../../../helpers/validation-service");
const file_utils_1 = require("../../../helpers/file-utils");
class StepRemove extends command_1.Command {
    async getStepDetails(scenarioPath, steps) {
        const prompt = [];
        if (!scenarioPath) {
            prompt.push({
                name: 'scenarioPath',
                message: 'Enter the path to the scenario',
                default: process.cwd(),
                validate: validation_service_1.validateScenario
            });
        }
        if (!steps) {
            prompt.push({
                name: 'steps',
                type: 'checkbox',
                message: 'Select steps to delete (Use spacebar to select)',
                choices: (response) => file_utils_1.getScenarioStepTitles(response.scenarioPath || scenarioPath),
                filter: (input) => input.join(','),
                validate: (input, responses) => validation_service_1.validateStep(input, responses, scenarioPath),
                when: (responses) => responses.scenarioPath || scenarioPath
            });
        }
        const response = await inquirer.prompt(prompt);
        scenarioPath && (response.scenarioPath = scenarioPath);
        steps && (response.steps = steps);
        return response;
    }
    getStepsToBeRemoved(existingSteps, inputSteps) {
        const stepsToBeDeleted = inputSteps.split(',').map(step => {
            return existingSteps.find(existingStep => step.toLowerCase().trim() === existingStep.title.toLowerCase());
        });
        return stepsToBeDeleted;
    }
    deleteStepFiles(scenarioPath, steps) {
        steps.forEach(step => {
            fs.removeSync(`${scenarioPath}/${step.text}`);
        });
    }
    updateScenarioIndexFile(scenarioPath, content, steps) {
        const newContent = content;
        const updatedSteps = content.details.steps.filter((existingStep) => !steps.some(step => step.text === existingStep.text));
        newContent.details.steps = updatedSteps;
        fs.writeJsonSync(`${scenarioPath}/index.json`, newContent, { spaces: 2 });
    }
    reIndexFiles(filepath) {
        file_utils_1.reIndexStepFiles(filepath);
        file_utils_1.reIndexScenarioJsonSteps(filepath);
    }
    async run() {
        let steps, scenarioPath;
        try {
            const { flags } = this.parse(StepRemove);
            if (flags.scenariopath) {
                const isScenarioValid = await validation_service_1.validateScenario(flags.scenariopath);
                if (isScenarioValid !== true) {
                    throw isScenarioValid;
                }
                scenarioPath = flags.scenariopath;
            }
            if (flags.steps) {
                const isStepValid = validation_service_1.validateStep(flags.steps, { scenarioPath });
                if (isStepValid !== true) {
                    throw isStepValid;
                }
                ({ steps } = flags);
            }
            const stepDetails = await this.getStepDetails(scenarioPath, steps);
            const scenarioData = file_utils_1.getScenarioIndex(stepDetails.scenarioPath);
            const existingSteps = file_utils_1.getScenarioSteps(scenarioData);
            const stepsToBeDeleted = this.getStepsToBeRemoved(existingSteps, stepDetails.steps);
            this.deleteStepFiles(stepDetails.scenarioPath, stepsToBeDeleted);
            this.updateScenarioIndexFile(stepDetails.scenarioPath, scenarioData, stepsToBeDeleted);
            this.reIndexFiles(stepDetails.scenarioPath);
            this.log(`${stepDetails.steps} removed successfully`);
        }
        catch (err) {
            return this.error(`${err.toString()}`);
        }
    }
}
StepRemove.description = 'Remove steps from scenario';
StepRemove.flags = {
    scenariopath: command_1.flags.string({ char: 'p', description: 'path to scenario' }),
    steps: command_1.flags.string({
        char: 's',
        description: 'steps to delete',
        dependsOn: ['scenariopath']
    })
};
exports.default = StepRemove;
