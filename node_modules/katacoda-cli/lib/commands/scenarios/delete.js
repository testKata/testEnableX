"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const inquirer = require("inquirer");
const validation_service_1 = require("../../helpers/validation-service");
const fs = require("fs");
const rimraf = require('rimraf');
const file_utils_1 = require("../../helpers/file-utils");
const path = require("path");
class ScenariosDelete extends command_1.Command {
    getScenarios(coursePath) {
        const course = validation_service_1.getFriendlyUrlFromPath(coursePath);
        const content = file_utils_1.getFileContents(`${path.join(coursePath, '../')}${course}-pathway.json`);
        const obj = {};
        content.courses.forEach((scenario) => {
            obj[scenario.title] = scenario.course_id;
        });
        return obj;
    }
    deleteScenario(response) {
        if (response.scenarioPath) {
            rimraf.sync(response.scenarioPath);
        }
        else if (response.scenario) {
            const scenarioList = this.getScenarios(response.coursePath);
            const scenarioId = scenarioList[response.scenario];
            rimraf.sync(`${response.coursePath}/${scenarioId}`);
            const course = validation_service_1.getFriendlyUrlFromPath(response.coursePath);
            this.updatePathwayFile(course, scenarioId);
        }
    }
    updatePathwayFile(course, scenarioId) {
        const pathwayFile = `${course}-pathway.json`;
        let content = file_utils_1.getFileContents(pathwayFile);
        content.courses = content.courses.filter((scenario) => scenario.course_id !== scenarioId);
        content = JSON.stringify(content, null, 2);
        fs.writeFileSync(pathwayFile, content, 'utf8');
    }
    deleteConfirmationMessage(responses) {
        const scenario = responses.scenario || responses.scenarioPath;
        return `Are you sure you want to delete "${scenario}"`;
    }
    async getScenarioDetails() {
        const responses = await inquirer.prompt([
            {
                type: 'confirm',
                name: 'scenarioBelongsToCourse',
                message: `Is the scenario part of a course?`,
                default: false
            },
            {
                name: 'coursePath',
                message: 'Please enter course path',
                default: process.cwd(),
                validate: validation_service_1.validateCourse,
                when: (responses) => responses.scenarioBelongsToCourse
            },
            {
                type: 'list',
                name: 'scenario',
                message: 'Select the scenario you want to delete',
                choices: (responses) => Object.keys(this.getScenarios(responses.coursePath)),
                when: (responses) => responses.coursePath
            },
            {
                name: 'scenarioPath',
                message: 'Please enter scenario path',
                default: process.cwd(),
                validate: validation_service_1.validateScenario,
                when: (responses) => !responses.scenarioBelongsToCourse
            },
            {
                type: 'confirm',
                name: 'confirmDelete',
                message: this.deleteConfirmationMessage,
                default: false
            }
        ]);
        return responses;
    }
    async run() {
        try {
            const response = await this.getScenarioDetails();
            if (response.confirmDelete) {
                this.deleteScenario(response);
                return this.log('Scenario succesfully deleted.');
            }
        }
        catch (err) {
            return this.error(`Error: ${err.toString()}`);
        }
    }
}
ScenariosDelete.description = 'Safely remove a scenario';
exports.default = ScenariosDelete;
